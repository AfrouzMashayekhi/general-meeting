#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#


#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: trader

  logging:
    level: info

    # Global configuration for peer, event service and orderer timeouts
    # if this this section is omitted, then default values will be used (same values as below)
    #  peer:
    #    timeout:
    #      connection: 10s
    #      response: 180s
    #      discovery:
    #        # Expiry period for discovery service greylist filter
    #        # The channel client will greylist peers that are found to be offline
    #        # to prevent re-selecting them in subsequent retries.
    #        # This interval will define how long a peer is greylisted
    #        greylistExpiry: 10s

    # the below timeouts are commented out to use the default values that are found in
    # "pkg/fab/endpointconfig.go"
    # the client is free to override the default values by uncommenting and resetting
    # the values as they see fit in their config file
  #    timeout:
  #      connection: 15s
  #      registrationResponse: 15s
  #  orderer:
  #    timeout:
  #      connection: 15s
  #      response: 15s
  #  global:
  #    timeout:
  #      query: 180s
  #      execute: 180s
  #      resmgmt: 180s
  #    cache:
  #      connectionIdle: 30s
  #      eventServiceIdle: 2m
  #      channelConfig: 30m
  #      channelMembership: 30s
  #      discovery: 10s
  #      selection: 10m

  # Root of the MSP directories with keys and certs.
  cryptoconfig:
    path: ${GOPATH}/src/fabric-samples/my-network/organizations

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/state-store"

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /tmp/msp

  # [Optional] BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false

    # [Optional]. Client key and cert for TLS handshake with peers and orderers
    client:
      key:
        path:
      cert:
        path:

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:

  # Default channel is used if channel configuration is missing or if defined channel configuration is missing info
  # If channel doesn't define peers then peers from default channel will be used
  # If channel doesn't define orderes then orderes from default channel will be used
  # If channel doesn't define policies then policies from default channel will be used.
  # Also, if channel defines policies and some policy info is missing than that missing info will be filled from default channel.
  mychannel:
    #WARN Getting orderers from endpoint config channels.orderer is deprecated, use entity matchers to override orderer configuration
    #WARN visit https://github.com/hyperledger/fabric-sdk-go/blob/master/test/fixtures/config/overrides/local_entity_matchers.yaml for samples
#    orderers:
#      - orderer.share.com
    # [Optional]. list of peers from participating orgs
    peers:
      peer0.trader.share.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true
      peer0.company.share.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      peer0.regulator.share.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true
    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
    policies:
      #[Optional] options for retrieving discovery info
      discovery:
        #[Optional] discovery info will be retrieved for these number of random targets
        maxTargets: 2
        #[Optional] retry options for retriving discovery info
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 4
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0
      #[Optional] options for selection service
      selection:
        #[Optional] endorser selection sorting strategy. Possible values: [BlockHeightPriority,Balanced]
        SortingStrategy: BlockHeightPriority
        #[Optional] load-balancer type. Possible values: [RoundRobin,Random]
        Balancer: RoundRobin
        #[Optional] the number of blocks from the highest block number of a group of peers that a peer
        #can lag behind and still be considered to be up-to-date. These peers will be sorted using the
        #given Balancer. If a peer's block height falls behind this threshold then it will be demoted
        #to a lower priority list of peers which will be sorted according to block height.
        #Note: This property only applies to BlockHeightPriority sorter.
        BlockHeightLagThreshold: 5
      #[Optional] options for retrieving channel configuration blocks
      queryChannelConfig:
        #[Optional] min number of success responses (from targets/peers)
        minResponses: 1
        #[Optional] channel config will be retrieved for these number of random targets
        maxTargets: 1
        #[Optional] retry options for query config block
        retryOpts:
          #[Optional] number of retry attempts
          attempts: 5
          #[Optional] the back off interval for the first retry attempt
          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
          maxBackoff: 5s
          #[Optional] he factor by which the initial back off period is exponentially incremented
          backoffFactor: 2.0

      #[Optional] options for the event service
      eventService:
        # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer
        # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]
        #
        # PreferOrg:
        #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the
        #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org
        #   are suitable then a peer from another org is chosen.
        # MinBlockHeight:
        #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is
        #   determined and the peers whose block heights are under the maximum height but above a provided "lag" threshold are load
        #   balanced. The other peers are not considered.
        # Balanced:
        #   Chooses peers using the configured balancer.
        resolverStrategy: PreferOrg

        # [Optional] balancer is the balancer to use when choosing a peer to connect to
        # Possible values: [Random (default), RoundRobin]
        balancer: RoundRobin

        # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer
        # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of
        # blocks then it will be excluded from selection.
        # Note that this parameter is applicable only when minBlockHeightResolverMode is set to ResolveByThreshold.
        # Default: 5
        blockHeightLagThreshold: 2

        # [Optional] reconnectBlockHeightLagThreshold - the event client will disconnect from the peer if the peer's
        # block height falls behind the specified number of blocks and will reconnect to a better performing peer.
        # Note that this parameter is only applicable if peerMonitor is set to Enabled (default).
        # Default: 10
        # NOTES:
        #   - Setting this value too low may cause the event client to disconnect/reconnect too frequently, thereby
        #     affecting performance.
        reconnectBlockHeightLagThreshold: 5

        # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if
        # the event client should disconnect from it and reconnect to another peer.
        # Default: 0 (disabled) for Balanced resolverStrategy; 5s for PreferOrg and MinBlockHeight strategy
        peerMonitorPeriod: 3s


#
# list of participating organizations in this network
#
organizations:
  trader:
    mspid: trader.share.com
    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/trader.share.com/users/User1@trader.share.com/msp
    peers:
      - peer0.trader.share.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca.trader.share.com

  company:
    mspid: company.share.com
    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/company.share.com/users/User1@company.share.com/msp
    peers:
      - peer0.company.share.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca.company.share.com

  regulator:
    mspid: regulator.share.com
    # This org's MSP store (absolute path or relative to client.cryptoconfig)
    cryptoPath:  ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/regulator.share.com/users/User1@regulator.share.com/msp
    peers:
      - peer0.regulator.share.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - ca.regulator.share.com

  # Orderer Org name
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: OrdererMSP

    # Needed to load users crypto keys and certs for this org (absolute path or relative to global crypto path, DEV mode)
    cryptoPath: ${GOPATH}/src/fabric-samples/my-network/organizations/ordererOrganizations/share.com/msp

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:

  orderer.share.com:
    # [Optional] Default: Infer from hostname
    url: orderer.share.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      # These parameters should be set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/ordererOrganizations/share.com/msp/tlscacerts/tlsca.share.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:

  peer0.trader.share.com:
    # this URL is used to send endorsement and query requests
    # [Optional] Default: Infer from hostname
    url: peer0.trader.share.com:7051

    #grpcOptions:
    #  ssl-target-name-override: peer0.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/trader.share.com/tlsca/tlsca.trader.share.com-cert.pem
  peer0.company.share.com:
    # this URL is used to send endorsement and query requests
    url: peer0.company.share.com:11051

    #grpcOptions:
    #  ssl-target-name-override: peer1.org1.example.com

    tlsCACerts:
      # Certificate location absolute path
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/company.share.com/tlsca/tlsca.company.share.com-cert.pem
  peer0.regulator.share.com:
    url: peer0.regulator.share.com:9051
    #grpcOptions:
    #  ssl-target-name-override: peer0.org2.example.com

    tlsCACerts:
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/regulator.share.com/tlsca/tlsca.regulator.share.com-cert.pem
#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca.trader.share.com:
    # [Optional] Default: Infer from hostname
    url: https://ca.trader.share.com:7054
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org1.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/trader.share.com/tlsca/tlsca.trader.share.com-cert.pem
    registrar:
      enrollId: admin
      enrollSecret: adminpw

  ca.company.share.com:
    # [Optional] Default: Infer from hostname
    url: https://ca.company.share.com:10054
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/trader.share.com/tlsca/tlsca.trader.share.com-cert.pem
      # Client key and cert for SSL handshake with Fabric CA
    registrar:
      enrollId: admin
      enrollSecret: adminpw

  ca.regulator.share.com:
    url: https://ca.regulator.share.com:8054
    # [Optional] The optional server name for target override
    #grpcOptions:
    #  ssl-target-name-override: ca.org2.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      path: ${GOPATH}/src/fabric-samples/my-network/organizations/peerOrganizations/regulator.share.com/tlsca/tlsca.regulator.share.com-cert.pem

    registrar:
      enrollId: admin
      enrollSecret: adminpw

  # EntityMatchers enable substitution of network hostnames with static configurations
  # so that properties can be mapped. Regex can be used for this purpose
  # UrlSubstitutionExp can be empty which means the same network hostname will be used
  # UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
  # UrlSubstitutionExp can have golang regex matchers like ${1}.local.example.${2}:${3} for pattern
  # like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
  # sslTargetOverrideUrlSubstitutionExp follow in the same lines as
  # SubstitutionExp for the fields gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used
#entityMatchers:
entityMatchers:
  peer:
    - pattern: (\w+).trader.share.com:(\d+)
      urlSubstitutionExp: ${1}.trader.share.com:${2}
      sslTargetOverrideUrlSubstitutionExp: ${1}.trader.share.com
      mappedHost: peer0.trader.share.com

    - pattern: (\w+).company.share.com:(\d+)
      urlSubstitutionExp: ${1}.company.share.com:${2}
      sslTargetOverrideUrlSubstitutionExp: ${1}.company.share.com
      mappedHost: peer0.company.share.com

    - pattern: (\w+).regulator.share.com:(\d+)
      urlSubstitutionExp: ${1}.regulator.share.com:${2}
      sslTargetOverrideUrlSubstitutionExp: ${1}.regulator.share.com
      mappedHost: peer0.regulator.share.com


  orderer:
    - pattern: (\w+).share.(\w+)
      urlSubstitutionExp: orderer.share.com:7050
      sslTargetOverrideUrlSubstitutionExp: orderer.share.com
      mappedHost: orderer.share.com

  certificateAuthority:
    - pattern: (\w+).trader.share.(\w+)
      urlSubstitutionExp: https://localhost:7054
#      sslTargetOverrideUrlSubstitutionExp: ca.trader.share.com
      mappedHost: ca.trader.share.com

    - pattern: (\w+).company.share.(\w+)
      urlSubstitutionExp: https://localhost:10054
#      sslTargetOverrideUrlSubstitutionExp: ca.company.share.com
      mappedHost: ca.company.share.com

    - pattern: (\w+).regulator.share.(\w+)
      urlSubstitutionExp: https://localhost:8054
#      sslTargetOverrideUrlSubstitutionExp: ca.regulator.share.com
      mappedHost: ca.regualtor.share.com
###############################################################################
#
#    Operations section
#    copied from Fabric's core.yaml
###############################################################################
#operations:
#  # host and port for the operations server
#  listenAddress: 127.0.0.1:8080
#
#  # TLS configuration for the operations endpoint
#  tls:
#    # TLS enabled
#    enabled: false
#
#    # TODO replace cert.file, key.file and clientRootCAs.files to tlsCACerts as used elsewhere in this config file
#    # path to PEM encoded server certificate for the operations server
#    cert:
#      file:
#
#    # path to PEM encoded server key for the operations server
#    key:
#      file:
#
#    # require client certificate authentication to access all resources
#    clientAuthRequired: false
#
#    # paths to PEM encoded ca certificates to trust for client authentication
#    clientRootCAs:
#      files: []
#
################################################################################
##
##    Metrics section
##    copied from Fabric's core.yaml
################################################################################
#metrics:
#  # metrics provider is one of statsd, prometheus, or disabled
#  provider: disabled
#
#  # statsd configuration
#  statsd:
#    # network type: tcp or udp
#    network: udp
#
#    # statsd server address
#    address: 127.0.0.1:8125
#
#    # the interval at which locally cached counters and gauges are pushed
#    # to statsd; timings are pushed immediately
#    writeInterval: 10s
#
#    # prefix is prepended to all emitted statsd metrics
#    prefix: