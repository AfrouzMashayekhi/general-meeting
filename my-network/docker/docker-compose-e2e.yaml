# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

volumes:
  orderer.share.com:
  peer0.customer.share.com:
  peer0.regulator.share.com:
  peer0.sharedealer.share.com:

networks:
  test:

services:

  ca0:
    image: hyperledger/fabric-ca:$IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-customer
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../organizations/fabric-ca/customer:/etc/hyperledger/fabric-ca-server
    container_name: ca_customer
    networks:
      - test

  ca1:
    image: hyperledger/fabric-ca:$IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-regulator
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=8054
    ports:
      - "8054:8054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../organizations/fabric-ca/regulator:/etc/hyperledger/fabric-ca-server
    container_name: ca_regulator
    networks:
      - test

  ca2:
    image: hyperledger/fabric-ca:$IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-orderer
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=9054
    ports:
      - "9054:9054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../organizations/fabric-ca/ordererOrg:/etc/hyperledger/fabric-ca-server
    container_name: ca_orderer
    networks:
      - test


  ca3:
    image: hyperledger/fabric-ca:$IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-sharedealer
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=10054
    ports:
      - "10054:10054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../organizations/fabric-ca/sharedealer:/etc/hyperledger/fabric-ca-server
    container_name: ca_sharedealer
    networks:
      - test

    orderer.share.com:
      container_name: orderer.share.com
      image: hyperledger/fabric-orderer:$IMAGE_TAG
      environment:
        - FABRIC_LOGGING_SPEC=INFO
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
        # enabled TLS
        - ORDERER_GENERAL_TLS_ENABLED=true
        - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
        - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
        - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
        - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
        - ORDERER_KAFKA_VERBOSE=true
        - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
        - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
        - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric
      command: orderer
      volumes:
          - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
          - ../organizations/ordererOrganizations/share.com/orderers/orderer.share.com/msp:/var/hyperledger/orderer/msp
          - ../organizations/ordererOrganizations/share.com/orderers/orderer.share.com/tls/:/var/hyperledger/orderer/tls
          - orderer.share.com:/var/hyperledger/production/orderer
      ports:
        - 7050:7050
      networks:
        - test

    peer0.customer.share.com:
      container_name: peer0.customer.share.com
      image: hyperledger/fabric-peer:$IMAGE_TAG
      environment:
        #Generic peer variables
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        # the following setting starts chaincode containers on the same
        # bridge network as the peers
        # https://docs.docker.com/compose/networking/
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
        - FABRIC_LOGGING_SPEC=INFO
        #- FABRIC_LOGGING_SPEC=DEBUG
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        - CORE_PEER_PROFILE_ENABLED=true
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
        # Peer specific variabes
        - CORE_PEER_ID=peer0.customer.share.com
        - CORE_PEER_ADDRESS=peer0.customer.share.com:7051
        - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
        - CORE_PEER_CHAINCODEADDRESS=peer0.customer.share.com:7052
        - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
        - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.customer.share.com:7051
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.customer.share.com:7051
        - CORE_PEER_LOCALMSPID=CustomerMSP
      volumes:
          - /var/run/:/host/var/run/
          - ../organizations/peerOrganizations/customer.share.com/peers/peer0.customer.share.com/msp:/etc/hyperledger/fabric/msp
          - ../organizations/peerOrganizations/customer.share.com/peers/peer0.customer.share.com/tls:/etc/hyperledger/fabric/tls
          - peer0.customer.share.com:/var/hyperledger/production
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
      command: peer node start
      ports:
        - 7051:7051
      networks:
        - test

    peer0.regulator.share.com:
      container_name: peer0.regulator.share.com
      image: hyperledger/fabric-peer:$IMAGE_TAG
      environment:
        #Generic peer variables
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        # the following setting starts chaincode containers on the same
        # bridge network as the peers
        # https://docs.docker.com/compose/networking/
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
        - FABRIC_LOGGING_SPEC=INFO
        #- FABRIC_LOGGING_SPEC=DEBUG
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        - CORE_PEER_PROFILE_ENABLED=true
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
        # Peer specific variabes
        - CORE_PEER_ID=peer0.regulator.share.com
        - CORE_PEER_ADDRESS=peer0.regulator.share.com:9051
        - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
        - CORE_PEER_CHAINCODEADDRESS=peer0.regulator.share.com:9052
        - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.regulator.share.com:9051
        - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.regulator.share.com:9051
        - CORE_PEER_LOCALMSPID=RegulatorMSP
      volumes:
          - /var/run/:/host/var/run/
          - ../organizations/peerOrganizations/regulator.share.com/peers/peer0.regulator.share.com/msp:/etc/hyperledger/fabric/msp
          - ../organizations/peerOrganizations/regulator.share.com/peers/peer0.regulator.share.com/tls:/etc/hyperledger/fabric/tls
          - peer0.regulator.share.com:/var/hyperledger/production
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
      command: peer node start
      ports:
        - 9051:9051
      networks:
        - test


    peer0.sharedealer.share.com:
      container_name: peer0.sharedealer.share.com
      image: hyperledger/fabric-peer:$IMAGE_TAG
      environment:
        #Generic peer variables
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        # the following setting starts chaincode containers on the same
        # bridge network as the peers
        # https://docs.docker.com/compose/networking/
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
        - FABRIC_LOGGING_SPEC=INFO
        #- FABRIC_LOGGING_SPEC=DEBUG
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        - CORE_PEER_PROFILE_ENABLED=true
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
        # Peer specific variabes
        - CORE_PEER_ID=peer0.sharedealer.share.com
        - CORE_PEER_ADDRESS=peer0.sharedealer.share.com:11051
        - CORE_PEER_LISTENADDRESS=0.0.0.0:11051
        - CORE_PEER_CHAINCODEADDRESS=peer0.sharedealer.share.com:11052
        - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:11052
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.sharedealer.share.com:11051
        - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.sharedealer.share.com:11051
        - CORE_PEER_LOCALMSPID=SharedealerMSP
      volumes:
          - /var/run/:/host/var/run/
          - ../organizations/peerOrganizations/sharedealer.share.com/peers/peer0.sharedealer.share.com/msp:/etc/hyperledger/fabric/msp
          - ../organizations/peerOrganizations/sharedealer.share.com/peers/peer0.sharedealer.share.com/tls:/etc/hyperledger/fabric/tls
          - peer0.sharedealer.share.com:/var/hyperledger/production
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
      command: peer node start
      ports:
        - 11051:11051
      networks:
        - test
