"use strict";
/**
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Logger = require("../../logger");
const logger = Logger.getLogger('ContractListenerSession');
class ContractListenerSession {
    constructor(listener, chaincodeId, network, options) {
        this.listener = listener;
        this.chaincodeId = chaincodeId;
        this.network = network;
        this.blockListener = (blockEvent) => this.onBlockEvent(blockEvent);
        this.options = options;
    }
    async start() {
        await this.network.addBlockListener(this.blockListener, this.options);
    }
    close() {
        this.network.removeBlockListener(this.blockListener);
    }
    async onBlockEvent(blockEvent) {
        for (const transactionEvent of blockEvent.getTransactionEvents()) {
            await this.onTransactionEvent(transactionEvent);
        }
    }
    async onTransactionEvent(transactionEvent) {
        if (transactionEvent.isValid) {
            await this.onValidTransactionEvent(transactionEvent);
        }
        else {
            logger.debug('Ignored contract events for invalid transaction:', transactionEvent);
        }
    }
    async onValidTransactionEvent(transactionEvent) {
        for (const contractEvent of transactionEvent.getContractEvents()) {
            if (this.isMatch(contractEvent)) {
                await this.notifyListener(contractEvent);
            }
        }
    }
    isMatch(event) {
        return event.chaincodeId === this.chaincodeId;
    }
    async notifyListener(event) {
        try {
            await this.listener(event);
        }
        catch (error) {
            logger.warn('Error notifying contract listener', error);
        }
    }
}
exports.ContractListenerSession = ContractListenerSession;
//# sourceMappingURL=contractlistenersession.js.map