"use strict";
/**
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const TransactionStatus = require("./transactionstatus");
const filteredeventfactory_1 = require("./filteredeventfactory");
const util = require("util");
function newCommitEvent(peer, eventInfo) {
    if (!eventInfo.transactionId || !eventInfo.status) {
        throw new Error('Invalid event info for commit event: ' + util.inspect(eventInfo));
    }
    const transactionId = eventInfo.transactionId;
    let blockEvent;
    function getBlockEvent() {
        if (!blockEvent) {
            blockEvent = filteredeventfactory_1.newFilteredBlockEvent(eventInfo);
        }
        return blockEvent;
    }
    let transactionEvent;
    function getTransactionEvent() {
        if (!transactionEvent) {
            transactionEvent = getBlockEvent().getTransactionEvents().find((tx) => tx.transactionId === transactionId);
            if (!transactionEvent) {
                throw new Error(`Transaction ${transactionId} does not exist in block: ${util.inspect(getBlockEvent())}`);
            }
        }
        return transactionEvent;
    }
    const commitEvent = {
        type: 'filtered',
        peer,
        transactionId,
        status: eventInfo.status,
        get transactionData() {
            return getTransactionEvent().transactionData;
        },
        isValid: eventInfo.status === TransactionStatus.VALID_STATUS,
        getBlockEvent: () => getBlockEvent(),
        getContractEvents: () => getTransactionEvent().getContractEvents()
    };
    return Object.freeze(commitEvent);
}
exports.newCommitEvent = newCommitEvent;
//# sourceMappingURL=commiteventfactory.js.map